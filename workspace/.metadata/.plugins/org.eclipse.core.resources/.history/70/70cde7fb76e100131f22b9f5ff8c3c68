import static java.lang.Math.*;
import static java.util.Arrays.*;
import java.io.*;
import java.util.*;
import java.math.*;

public class Toy {
	static boolean LOCAL = System.getSecurityManager() == null;
	Scanner input = new Scanner(System.in);
	
	int[] bit, m, k, ans;
	int N;
	
	void run() {
		N = input.nextInt();
		bit = new int[N + 1];
		m = new int[N + 1];
		k = new int[N + 1];
		ans = new int[N + 1];
		for(int i = 1; i <= N; ++i) {
			for(int j = i; j <= N; j += j & -j) {
				++bit[j];
			}
			k[i] = input.nextInt();
			m[i] = input.nextInt();
		}
		for(int i = N; i >= 1; --i) {
			int p = Integer.highestOneBit(N);
			++k[i];
			for(int q = p; q > 0; q >>= 1, p |= q) {
				if(p > N || k[i] < bit[p]) {
					p ^= q;
				}
				else {
					k[i] -= bit[p];
				}
			}
			System.out.println("p:" + p);
			int ret = 0;
			for(int j = p + 1; j > 0; j -= j & -j) {
				ret += bit[j];
			}
			System.out.println("sum:" + ret);
			for(ans[p + 1] = m[i]; p <= N; p += p & -p) {
				--bit[p];
			}
		}
		for(int i = 1; i <= N; ++i) {
			if(i == 1) {
				System.out.print(ans[i]);
			}
			else {
				System.out.print(" " + ans[i]);
			}
		}
		System.out.println();
	}

	void debug(Object...os) {
		System.err.println(deepToString(os));
	}

	public static void main(String []args) {
		if(LOCAL) {
			try {
				System.setIn(new FileInputStream("in.txt"));
			}
			catch (Throwable e) {
				LOCAL = false;
			}
		}
		new Toy().run();
	}

}

class MyScanner {
	BufferedReader br;
	StringTokenizer st;

	MyScanner(InputStream in) {
		br = new BufferedReader(new InputStreamReader(in));
		eat("");
	}
	
	void eat(String s) {
		st = new StringTokenizer(s);
	}

	String nextLine() {
		try {
			return br.readLine();
		}
		catch(IOException e) {
			throw new IOError(e);
		}
	}

	boolean hasNext() {
		while(st.hasMoreTokens()) {
			String s = nextLine();
			if(s == null) {
				return false;
			}
			eat(s);
		}
		return true;
	}

	String next() {
		hasNext();
		return st.nextToken();
	}

	int nextInt() {
		return Integer.parseInt(next());
	}

	long nextLong() {
		return Long.parseLong(next());
	}

	double nextDouble() {
		return Double.parseDouble(next());
	}

	BigInteger nextBigInteger() {
		return new BigInteger(next());
	}
}

